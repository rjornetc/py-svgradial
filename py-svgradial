#! /usr/bin/python
# -*- coding: utf-8 -*-

__author__ = 'Raúl Jornet Calomarde'
__contact__ = 'rjornetc@openmailbox.org'
__copyright__ = 'Copyright © 2015, Raúl Jornet Calomarde'
__license__ = ''''License GPLv3+: GNU GPL version 3 or any later
This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or any later version. This program
is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.
<http://www.gnu.org/licenses/>'''
__date__ = '08/02/2015'
__version__ = '0.1.0'


from math import cos, sin, pi

class RadialGraph():
    
    title = ''
    axis_title = []
    series = {}
    min_value = 0
    max_value = 10
    
    def __init__(self, title):
        self.title = title
    
    
    def add_axis(self, axis):
        self.axis_title.append(axis)
    
    
    def add_serie(self, serie):
        self.series[serie] = [0,0,0,0,0]
    
    
    def add_value(self, serie, axis_title, value):
        axis_index = self.axis_title.index(axis_title)
        self.series[serie][axis_index] = value
    
    
    def get_svg(self):
        svg = '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:cc="http://creativecommons.org/ns#"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns="http://www.w3.org/2000/svg" width="256" height="256"
>
  <g transform="translate(128,128)" id="background">'''
        axis_title_count = len(self.axis_title)
        axis_title_angle = 2 * pi / axis_title_count
        for i in range(0, axis_title_count):
            current_angle = axis_title_angle * i
            svg += '''
    <path d="M 0,0 ''' +\
        str(sin(current_angle) * 96) + ',' +\
        str(-cos(current_angle) * 96) + '" id="' +\
        self.axis_title[i] + '" style="stroke:#777777" />'
        
        svg += '\n  </g>'
        
        for serie in self.series.keys():
            svg += '''
  <g transform="translate(128,128)" id="''' + serie + '''">
    <path d="M '''
            for i in range(0, axis_title_count):
                current_angle = axis_title_angle * i
                value = float(self.series[serie][i]) / float(self.max_value)
                svg += str(sin(current_angle) * 96.0 * value) + ',' +\
                       str(-cos(current_angle) * 96.0 * value) + ' '
            svg += '''z" id="foreground" style="fill:none;stroke:#000000" />
  </g>'''
        svg += '''
</svg>'''
        return svg

if __name__ == '__main__':
    rg = RadialGraph('test')
    rg.add_axis(':C')
    rg.add_axis(':(')
    rg.add_axis(':|')
    rg.add_axis(':)')
    rg.add_axis(':D')
    rg.add_serie('pep')
    rg.add_value('pep', ':C', 8)
    rg.add_value('pep', ':(', 9)
    rg.add_value('pep', ':|', 7)
    rg.add_value('pep', ':)', 5)
    rg.add_value('pep', ':D', 4)
    rg.add_serie('other')
    rg.add_value('other', ':C', 4)
    rg.add_value('other', ':(', 4)
    rg.add_value('other', ':|', 4)
    rg.add_value('other', ':)', 4)
    rg.add_value('other', ':D', 4)
    print(rg.get_svg())